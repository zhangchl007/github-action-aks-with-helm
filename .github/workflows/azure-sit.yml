name: SIT Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY_NAME: crwebdemo
  CLUSTER_NAME: aks-demo-webapp
  CLUSTER_RESOURCE_GROUP: rg-github-action-001
  NAMESPACE: demo-webapp-sit
  CONTAINER_REGISTRY_URL: crwebdemo.azurecr.io
  CONTAINER_REGISTRY_SECRET: secret-acr
  APP_NAME: webapp

jobs:
  provision:
    runs-on: ubuntu-latest
    name: Provisioning Infra & Configuration

    steps:
    # CHECKOUT CONFIGUTAION FILES
    - name: Load Configuration Files
      uses: actions/checkout@v2

  build:
    runs-on: ubuntu-latest
    name: ReBuild Artifact
    needs: 
      - provision

    steps:
    - name: TAG Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ env.RELEASE_VERSION }}

    #----- CUSTOM DEPENDING ON FRAMEWORK -------
    - name: Set up Java version
      uses: actions/setup-java@v1
      with:
        java-version: '8'

    - name: Build with Maven
      run: mvn clean install -DskipTests

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: artifact-${{ env.RELEASE_VERSION }}
        path: '${{ github.workspace }}/target/*.jar'
  
  push:
    runs-on: ubuntu-latest
    name: Build Image
    needs: build

    steps:
    # TAG Release Version
    - name: TAG Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # REQUIRED LOAD DOCKER FILE
    - name: Load Dockerfile
      uses: actions/checkout@v2
      with:
        ref: ${{ env.RELEASE_VERSION }}

    # DOWNLOAD ARTIFACT
    - name: Load Artifact
      uses: actions/download-artifact@v2
      with:
        name: artifact-${{ env.RELEASE_VERSION }}
        path: '${{ github.workspace }}/target'
      
    # CONNECT TO AZURE CONTAINER REGISTRY
    - name: Connect to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # DOCKER BUILD & PUSH TO AZURE CONTAINER REGISTRY
    - name: Build image & Push to Azure Container Registry
      run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}-sit
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}-sit

  deploy_sit:
    runs-on: ubuntu-latest
    needs: push
    name: Deploy to SIT
    environment:
      name: SIT
      url: http://20.195.33.238/hello

    steps:
    # TAG Release Version
    - name: TAG Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    
    # LOAD HELM CONFIG FOR DEPLOY
    - name: Load Helm configuration files
      uses: actions/checkout@v2
      with:
        ref: ${{ env.RELEASE_VERSION }}

    # INSTALL HELM ON GITHUB HOST
    - name: Install Helm on GitHub host
      uses: Azure/setup-helm@v1
      with:
        version: v3.3.1

    # LOGIN AKS WITH CREDENTAIL
    - name: Login Azure Kubernates
      uses: Azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    # CREATE NAMESPACE IF NOT EXIST
    - name: Create namespace on AKS
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # CREATE IMAGE ACR SECRET IF NOT EXIST
    - name: Create Image ACR Secret If not exist
      uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.CONTAINER_REGISTRY_URL }}
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.CONTAINER_REGISTRY_SECRET }}
      id: create-secret
    
    # HELM DEPLOY OR UPGRADE TO AKS
    - name: Helm Deploy and Upgrade to AKS
      run: |
        helm upgrade \
        --install \
        --create-namespace \
        --atomic \
        --wait \
        --namespace \
        ${{ env.NAMESPACE }} \
        ${{ env.APP_NAME }} helm/ \
        --set image.name=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}-sit \
        --set imagePullSecrets[0].name=${{ env.CONTAINER_REGISTRY_SECRET }}

  e2e_test:
    runs-on: ubuntu-latest
    name: E2E with Robot Framework
    needs: deploy_sit

    steps:
    # TAG Release Version
    - name: TAG Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    # CHECKOUT
    - name: Checkout Source Code
      uses: actions/checkout@v2
      with:
        ref: ${{ env.RELEASE_VERSION }}

    # AUTOMATE TEST WITH ROBOT FRAMEWORK 
    - name: Robot Framework Action
      uses: tarathep/robotframework-github-action@v1.0
      with:
        tests_dir: '${{ github.workspace }}/tests/robot'
        reports_dir: '${{ github.workspace }}/tests/robot/reports'

    # UPLOAD REPORTS
    - name: Upload Reports
      uses: actions/upload-artifact@v2
      with:
        name: E2E Test Reports
        path: '${{ github.workspace }}/tests/robot/reports/*'
