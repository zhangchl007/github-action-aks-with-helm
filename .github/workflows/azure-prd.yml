name: PRD Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY_NAME: crwebdemo
  CLUSTER_NAME: aks-demo-webapp
  CLUSTER_RESOURCE_GROUP: rg-github-action-001
  NAMESPACE: demo-webapp-prd
  CONTAINER_REGISTRY_URL: crwebdemo.azurecr.io
  CONTAINER_REGISTRY_SECRET: secret-acr
  APP_NAME: webapp

jobs:
  provision:
    runs-on: ubuntu-latest
    name: Provisioning Infra & Configuration
    environment:
      name: PRD

    steps:
    # CHECKOUT CONFIGUTAION FILES
    - name: Load Configuration Files
      uses: actions/checkout@v2

  image_tag:
    runs-on: ubuntu-latest
    name: Image TAG
    needs: provision

    steps:
    # TAG Release Version
    - name: TAG Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    # CONNECT TO AZURE CONTAINER REGISTRY
    - name: Connect to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # DOCKER BUILD & PUSH TO AZURE CONTAINER REGISTRY
    - name: Image Pull & Push Tag to Azure Container Registry
      run: |
        docker pull ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}-stg
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}-stg ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}

  deploy_prd:
    runs-on: ubuntu-latest
    needs: image_tag
    name: Deploy to PRD
    environment:
      name: PRD
      url: http://20.195.33.238/hello

    steps:
    # TAG Release Version
    - name: TAG Release Version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    
    # LOAD HELM CONFIG FOR DEPLOY
    - name: Load Helm configuration files
      uses: actions/checkout@v2
      with:
        ref: ${{ env.RELEASE_VERSION }}

    # INSTALL HELM ON GITHUB HOST
    - name: Install Helm on GitHub host
      uses: Azure/setup-helm@v1
      with:
        version: v3.3.1

    # LOGIN AKS WITH CREDENTAIL
    - name: Login Azure Kubernates
      uses: Azure/aks-set-context@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    # CREATE NAMESPACE IF NOT EXIST
    - name: Create namespace on AKS
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # CREATE IMAGE ACR SECRET IF NOT EXIST
    - name: Create Image ACR Secret If not exist
      uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.CONTAINER_REGISTRY_URL }}
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.CONTAINER_REGISTRY_SECRET }}
      id: create-secret
    
    # HELM DEPLOY OR UPGRADE TO AKS
    - name: Helm Deploy and Upgrade to AKS
      run: |
        helm upgrade \
        --install \
        --create-namespace \
        --atomic \
        --wait \
        --namespace \
        ${{ env.NAMESPACE }} \
        ${{ env.APP_NAME }} helm/ \
        --set image.name=${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }} \
        --set imagePullSecrets[0].name=${{ env.CONTAINER_REGISTRY_SECRET }}
  
  security_scan:
    runs-on: ubuntu-latest
    needs: deploy_prd
    name: Security Scan
    steps:
    - run: echo process..

    